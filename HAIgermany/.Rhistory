}
)
usethis::use_data(
num_hai_patients_tidy,
mccabe_scores_distr_tidy,
overwrite = TRUE
)
library(BHAI)
library(dplyr)
library(tidyr)
library(purrr)
library(tibble)
#### Plot 1: Stratified Infection Rates ####
num_hai_patients_by_stratum <- purrr::imap(
num_hai_patients,
~ matrix(.x, ncol = 1, dimnames = list(.y, "TotalCases"))
)
num_hai_patients_tidy <- purrr::imap_dfr(
num_hai_patients_by_stratum,
function(mat, infection) {
# keep one row per AgeGroup Ã— HAI
data.frame(
AgeGroup = rownames(mat),
TotalCases = mat[,1],
Infection = infection
)
}
)
#### Plot 2: McCabe Score Distribution ####
mccabe_scores_distr_clean <- purrr::imap(
BHAI::mccabe_scores_distr,
function(hailist, infection) {
total_cases <- purrr::reduce(
hailist,
~ .x + rowSums(.y),
.init = 0
)
matrix(total_cases, ncol = 1, dimnames = list(rownames(hailist[[1]]), "TotalCases"))
}
)
mccabe_scores_distr_tidy <- purrr::imap_dfr(
mccabe_scores_distr_clean,
function(mat, infection) {
df <- as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
# ordering of age intervals
df <- df %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE))
df
}
)
usethis::use_data(
num_hai_patients_tidy,
mccabe_scores_distr_tidy,
overwrite = TRUE
)
library(dplyr)
library(purrr)
library(tibble)
library(tidyr)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
df <- as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
# sum across columns (originally Gender), we don't need gender
rowwise() %>%
mutate(TotalCases = sum(c_across(everything()))) %>%
ungroup() %>%
select(AgeGroup, TotalCases) %>%
mutate(Infection = infection)
})
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(infection_list, infection) {
# Sum across all matrices in the list
total_cases <- reduce(infection_list, ~ .x + rowSums(.y))
df <- tibble(
AgeGroup = names(total_cases),
TotalCases = total_cases,
Infection = infection
)
df
})
# Order AgeGroup properly
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
# Prepare tidy dataset for Stratified Infection Rates
num_hai_patients_tidy <- purrr::imap_dfr(
BHAI::num_hai_patients_by_stratum,
function(mat, infection) {
df <- as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
mutate(TotalCases = rowSums(across(everything(), ~ as.numeric(.)))) %>%  # sum across all columns
select(AgeGroup, TotalCases) %>%
mutate(Infection = infection)
df
}
)
library(dplyr)
library(purrr)
library(tibble)
library(tidyr)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(
BHAI::num_hai_patients_by_stratum,
function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(cols = everything(), names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
}
)
num_hai_patients_tidy <- purrr::imap_dfr(
BHAI::num_hai_patients_by_stratum,
function(vec, infection) {
tibble(
AgeGroup = names(vec),
TotalCases = as.numeric(vec),
Infection = infection
)
}
)
# Keep the age order consistent
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup,
levels = age_levels, ordered = TRUE)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(
BHAI::num_hai_patients_by_stratum,
function(mat, infection) {
df <- as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
# sum across all columns (originally Gender)
rowwise() %>%
mutate(TotalCases = sum(c_across(everything()))) %>%
ungroup() %>%
select(AgeGroup, TotalCases) %>%
mutate(Infection = infection)
df
}
)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(
BHAI::num_hai_patients_by_stratum,
function(mat, infection) {
df <- as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
# sum only numeric columns
rowwise() %>%
mutate(TotalCases = sum(across(where(is.numeric)))) %>%
ungroup() %>%
select(AgeGroup, TotalCases) %>%
mutate(Infection = infection)
df
}
)
# Keep the age order consistent
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(
num_hai_patients_tidy$AgeGroup,
levels = age_levels, ordered = TRUE
)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(infection_list, infection) {
# Sum across all matrices in the list
total_cases <- reduce(infection_list, function(acc, mat) acc + rowSums(mat))
df <- tibble(
AgeGroup = names(total_cases),
TotalCases = total_cases,
Infection = infection
)
df
})
# Order AgeGroup properly
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(df$AgeGroup, levels = age_levels, ordered = TRUE)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
num_hai_patients_tidy
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(infection_list, infection) {
# Sum across all matrices in the list
total_cases <- reduce(infection_list, function(acc, mat) acc + rowSums(mat))
df <- tibble(
AgeGroup = names(total_cases),
TotalCases = total_cases,
Infection = infection
)
df
})
# Order AgeGroup properly
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(infection_list, infection) {
# Sum across all matrices in the list
total_cases <- reduce(infection_list, function(acc, mat) acc + rowSums(mat))
df <- tibble(
AgeGroup = names(total_cases),
TotalCases = total_cases,
Infection = infection
)
df
})
mccabe_scores_distr_tidy
mccabe_scores_distr
df
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(infection_list, infection) {
# Sum across all matrices in the list
total_cases <- reduce(infection_list, function(acc, mat) acc + rowSums(mat))
df <- tibble(
AgeGroup = names(total_cases),
TotalCases = total_cases,
Infection = infection
)
df
})
mccabe_scores_distr_tidy
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE))
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE))
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
View(num_hai_patients_tidy)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE))
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
View(mccabe_scores_distr_tidy)
View(num_hai_patients_tidy)
View(mccabe_scores_distr_tidy)
View(num_hai_patients_tidy)
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
View(num_hai_patients_tidy)
head(num_hai_patients_tidy)
shiny::runApp('inst/shiny-app')
runApp('inst/shiny-app')
shiny::runApp('inst/shiny-app')
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
library(tidyr)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
runApp('inst/shiny-app')
shiny::runApp('inst/shiny-app')
install.packages("HAIgermany")
install.packages("HAIgermany")
devtools::load_all()
library(dplyr)
library(purrr)
library(tibble)
library(BHAI)
library(tidyr)
num_hai_patients_tidy <- purrr::imap_dfr(BHAI::num_hai_patients_by_stratum, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)
})
#ordering of the age-intervals to make sure [5,9] isn't between [45,49] and [50,54]
age_levels <- rownames(BHAI::num_hai_patients_by_stratum[[1]])
num_hai_patients_tidy$AgeGroup <- factor(num_hai_patients_tidy$AgeGroup, levels = age_levels, ordered = TRUE)
mccabe_scores_distr_tidy <- purrr::imap_dfr(BHAI::mccabe_scores_distr, function(mat, infection) {
as.data.frame(mat) %>%
tibble::rownames_to_column("AgeGroup") %>%
pivot_longer(-AgeGroup, names_to = "Gender", values_to = "Cases") %>%
group_by(AgeGroup) %>%
summarise(TotalCases = sum(Cases, na.rm = TRUE), .groups = "drop") %>%
mutate(Infection = infection)})
mccabe_scores_distr_tidy <- mccabe_scores_distr_tidy %>%
mutate(AgeLow = as.numeric(gsub("\\D*(\\d+).*", "\\1", AgeGroup))) %>%
arrange(AgeLow) %>%
mutate(AgeGroup = factor(AgeGroup, levels = unique(AgeGroup), ordered = TRUE)) %>%
select(-AgeLow)
#### Save datasets if needed ####
usethis::use_data(num_hai_patients_tidy, mccabe_scores_distr_tidy, overwrite = TRUE)
devtools::install(".", force = TRUE)
shiny::runApp('inst/shiny-app')
shiny::runApp('inst/shiny-app')
shiny::runApp('inst/shiny-app')
devtools::document()
devtools::install(".", force = TRUE)
library(HAIgermany)
run_HAIgermany_app()
devtools::document()
devtools::document()
?mccabe_scores_distr_tidy
